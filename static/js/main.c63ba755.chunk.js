(this.webpackJsonpblogging=this.webpackJsonpblogging||[]).push([[0],{34:function(e,t,n){e.exports=n(52)},39:function(e,t,n){},48:function(e,t,n){},52:function(e,t,n){"use strict";n.r(t);var s=n(0),i=n.n(s),o=n(22),a=n.n(o),l=(n(39),n(40),n(32)),r=n(1),p=n(19);var c='\n\n\n/*Creating mock bean with a mock method call for testing init/lifecycle methods  */\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = {PublishMsgTokenApiImplTest.MockBeanConfiguration.class})\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class PublishMsgTokenApiImplTest implements CommDataSet {\n    @Configuration\n    public static class MockBeanConfiguration implements CommDataSet {\n        @Autowired\n        private PublishApiConfig publishApiConfig;\n\n        @Bean\n        public RestTemplate createRestTemplate() {\n            RestTemplate restTemplate = mock(RestTemplate.class);\n            HttpEntity<TokenRequest> entity = getTokenRequestHttpEntity(publishApiConfig);\n            ResponseEntity<TokenResponse> responseEntity = getTokenResponseResponseEntity();\n            when(restTemplate.exchange(eq(publishApiConfig.getTokenUrl()), eq(HttpMethod.POST), eq(entity), eq(TokenResponse.class)))\n                    .thenReturn(responseEntity);\n            return restTemplate;\n        }\n\n    }\n\n    @Test\n    @Order(1)\n    void test_init_method_loadToken() {\n        verify(restTemplate, times(1))\n                .exchange(eq(publishApiConfig.getTokenUrl()), eq(HttpMethod.POST), any(), eq(TokenResponse.class));\n    }\n\n    /*Executing same mock method multiple time on a same test with different responses like Expetions Generic method the code is in the rest template mocking also for retry*/\n    @Test\n    void test_update_method_Success_With_Retry() {\n        //Assemble\n        HttpEntity<TokenRequest> entity = getTokenRequestHttpEntity(publishApiConfig);\n        TokenResponse tokenRequestNew = new TokenResponse("new-access-token-retry", TOKEN_TYPE, EXPIRES_IN);\n        ResponseEntity<TokenResponse> responseEntity = new ResponseEntity<>(tokenRequestNew, HttpStatus.OK);\n        when(restTemplate.exchange(eq(publishApiConfig.getTokenUrl()), eq(HttpMethod.POST), eq(entity), eq(TokenResponse.class)))\n                .thenAnswer(invocationOnMock -> {\n                    if (INNVOCATION_COUNT == 0 || INNVOCATION_COUNT == 1) {\n                        INNVOCATION_COUNT++;\n                        HttpHeaders headers = new HttpHeaders();\n                        throw new RestClientResponseException("Rest exp", 403, "Forbidden", headers, null, null);\n                    }\n                    return responseEntity;\n                });\n        //ACT\n        publishMsgTokenApi.updateToken();\n        //Assert\n        assertEquals("new-access-token-retry", publishMsgTokenApi.getAccessToken());\n        verify(restTemplate, times(3))\n                .exchange(eq(publishApiConfig.getTokenUrl()), eq(HttpMethod.POST), any(), eq(TokenResponse.class));\n    }\n\n    //Verify everything not just exception to prove you test hypothies is correct.\n    @Test\n    void test_publishMessage_return_401Unauthorized_UpdateToken_PublishMsg_re_return_401_Failure() {\n        //Assemble\n        HttpEntity<DisplayMsgRequest> entity = new HttpEntity<>(getDisplayMsgRequest(), getHttpHeadersPublishMsgApi());\n\n        when(restTemplate.exchange(eq(publishApiConfig.getPublishApiUrl()), eq(HttpMethod.POST), eq(entity), eq(DisplayMessage.class)))\n                .thenThrow(new RestClientResponseException(UNAUTHORIZED_MSG, UNAUTHORIZED_STATUS_CODE, UNAUTHORIZED_STATUS_TXT, getUnauthorizedHeader(), null, null));\n        //Act\n        RestClientResponseException response = assertThrows(RestClientResponseException.class,\n                () -> publishMsgApiService.publishNewMsg(getDisplayMsgRequest()));\n        //Assert\n        assertEquals(UNAUTHORIZED_STATUS_CODE, response.getRawStatusCode());\n        verify(restTemplate, times(2))\n                .exchange(eq(publishApiConfig.getPublishApiUrl()),\n                        eq(HttpMethod.POST),\n                        eq(entity), eq(DisplayMessage.class));\n        verify(publishMsgTokenApi, times(2)).getAccessToken();\n        verify(publishMsgTokenApi, times(1)).updateToken();\n    }\n}\n\n\n',h=function(){return i.a.createElement("div",{className:"container"},i.a.createElement("h2",null,"Test driven development textbook "),i.a.createElement("p",null,"Test driven development is not new but as technology is progressing there has been a change in software development process and TDD has gain popularity and embraced by Companies at large. Few factors which have effected this change are ease of integrating dynamically changing requirements, bug fix and application changes are quick and finally my favorite low tech-depth with clean code."),i.a.createElement("p",null,"For many years I too tried to understand this new power just by thinking and trying to answer how... how to write a test before the code and felt clueless. Only recently I have the time and people to help me move in this direction. I have documented a small POC project that might help few developers in this learning process. Also, might help few to understand, with little time and effort test driven development possible for every piece of code. Hope this will be helpful to few."),i.a.createElement("blockquote",null,"Developer super power => Red -> Green -> Refactor"),i.a.createElement("blockquote",null,"Think first=> Assemble -- Act \u2013 Assert"),i.a.createElement("h3",null,"Important points I like to share which will be reflected in my code below which can help in strong TDD foundation:"),i.a.createElement("ul",null,i.a.createElement("li",null,"Whenever using mock try passing the actual expected values instead of using matchers like (any,  anyString, anyList, etc) unless you have a string reason to do so, as passing actual data to mock method is a kind of code verification/code assertion."),i.a.createElement("li",null,"Always verify your test case hypotheses by checking everything like assertions, method call verification, exceptions verification."),i.a.createElement("li",null,"Once green try to change code and make your test case fail for every scenario it's expected to fail that will help in deeper understanding and strong test case verification.")),i.a.createElement("div",{style:{fontFamily:"Fira Code",textAlign:"left"}},i.a.createElement(p.a,{text:c,language:"java",showLineNumbers:!1,theme:p.b,wrapline:!0})))};n(48);var u=function(){return i.a.createElement(l.a,null,i.a.createElement("div",null,i.a.createElement(r.c,null,i.a.createElement(r.a,{path:"/tdd-notebook"},i.a.createElement(h,null)),i.a.createElement(r.a,{path:"/"},i.a.createElement(h,null)))))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(u,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[34,152,153]]]);
//# sourceMappingURL=main.c63ba755.chunk.js.map